@charset "UTF-8";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:list";


// ---------------------------------------------
// ここから変数
// ---------------------------------------------

// color
$color-body: #333;
$color-blue1: #001f63;
$color-blue2: #000080;
$color-accent: #000080;

// font
$font-sans: "Noto Sans JP", sans-serif;
$font-hiragino: hiragino-kaku-gothic-pron, sans-serif;


// font-size
:root {
  --invariants: 2.5; //初期値2.5

  @for $var from 10 through 200 {
    --fz#{$var}: min(calc(0.1rem * #{$var}), calc(0.1vw * #{$var} * var(--invariants)));
  }
}




// ---------------------------------------------
// pxからvwに変換
// ---------------------------------------------

$vw-base: 1920px !default;

/// px を vw に変換する関数。
/// @param {number} $px   - px 長さ（0 は可）
/// @param {number} $base - 基準幅（px）。省略時は $vw-base。
/// @return {number} - vw 長さ
@function px-to-vw($px, $base: $vw-base) {
  // $base の妥当性チェック
  @if not math.compatible($base, 1px) {
    @error "px-to-vw: $base must be a pixel length (e.g. 1920px).";
  }

  @if $base <= 0 {
    @error "px-to-vw: $base must be greater than 0.";
  }

  // 0 は単位付きで返す（型を一定に）
  @if $px == 0 {
    @return 0;
  }

  // $px は px 長さであること
  @if not math.compatible($px, 1px) {
    @error "px-to-vw: $px must be a pixel length (e.g. 16px).";
  }

  // (px/px) → 比率 × 100vw
  @return math.div($px, $base) * 100vw;
}

/// 任意の CSS プロパティに vw を適用するミックスイン。
/// @example
/// .title { @include vw(font-size, 20px); }
@mixin vw($property, $px, $base: $vw-base) {
  #{$property}: px-to-vw($px, $base);
}

/* そのまま使う（デフォルト基準幅 1440px） */
// .test {
//   padding-left: px-to-vw(24px);
//   font-size: px-to-vw(20px);
// }




// ---------------------------------------------
// ここまで
// ---------------------------------------------

// breakpoint
$max-breakpoints: (
  "tb": 767px,
);
$min-breakpoints: (
  "pc": 768px
);
$tablet-breakpoints: (
  "tb": 1180px
);

// responsive
@mixin max-mq($breakpoint: tb) {
  // 767px以下
  @media (max-width: map.get($max-breakpoints, $breakpoint)) {
    @content;
  }
}

@mixin min-mq($breakpoint: pc) {
  // 768px以上
  @media (min-width: map.get($min-breakpoints, $breakpoint)) {
    @content;
  }
}

@mixin tb-mq($breakpoint: tb) {
  // 1024px以下
  @media (max-width: map.get($tablet-breakpoints, $breakpoint)) {
    @content;
  }
}

@include min-mq {
  // 768px以上
  .is-hidden_pc {
    display: none;
  }
}

@include tb-mq {
  // 1024px以下の時のスタイル
  .example {
    display: block;
  }
}

@include max-mq {
  // 767px以下
  .is-hidden_sp {
    display: none !important;
  }
}
